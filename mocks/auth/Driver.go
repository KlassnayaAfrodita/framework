// Code generated by mockery. DO NOT EDIT.

package auth

import mock "github.com/stretchr/testify/mock"

// Driver is an autogenerated mock type for the Driver type
type Driver struct {
	mock.Mock
}

type Driver_Expecter struct {
	mock *mock.Mock
}

func (_m *Driver) EXPECT() *Driver_Expecter {
	return &Driver_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: sessionID
func (_m *Driver) Authenticate(sessionID string) error {
	ret := _m.Called(sessionID)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Driver_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type Driver_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - sessionID string
func (_e *Driver_Expecter) Authenticate(sessionID interface{}) *Driver_Authenticate_Call {
	return &Driver_Authenticate_Call{Call: _e.mock.On("Authenticate", sessionID)}
}

func (_c *Driver_Authenticate_Call) Run(run func(sessionID string)) *Driver_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Driver_Authenticate_Call) Return(_a0 error) *Driver_Authenticate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Driver_Authenticate_Call) RunAndReturn(run func(string) error) *Driver_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: userID, data
func (_m *Driver) Login(userID string, data map[string]interface{}) (string, error) {
	ret := _m.Called(userID, data)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) (string, error)); ok {
		return rf(userID, data)
	}
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) string); ok {
		r0 = rf(userID, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, map[string]interface{}) error); ok {
		r1 = rf(userID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Driver_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type Driver_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - userID string
//   - data map[string]interface{}
func (_e *Driver_Expecter) Login(userID interface{}, data interface{}) *Driver_Login_Call {
	return &Driver_Login_Call{Call: _e.mock.On("Login", userID, data)}
}

func (_c *Driver_Login_Call) Run(run func(userID string, data map[string]interface{})) *Driver_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *Driver_Login_Call) Return(_a0 string, _a1 error) *Driver_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Driver_Login_Call) RunAndReturn(run func(string, map[string]interface{}) (string, error)) *Driver_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: sessionID
func (_m *Driver) Logout(sessionID string) error {
	ret := _m.Called(sessionID)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Driver_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type Driver_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - sessionID string
func (_e *Driver_Expecter) Logout(sessionID interface{}) *Driver_Logout_Call {
	return &Driver_Logout_Call{Call: _e.mock.On("Logout", sessionID)}
}

func (_c *Driver_Logout_Call) Run(run func(sessionID string)) *Driver_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Driver_Logout_Call) Return(_a0 error) *Driver_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Driver_Logout_Call) RunAndReturn(run func(string) error) *Driver_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// NewDriver creates a new instance of Driver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDriver(t interface {
	mock.TestingT
	Cleanup(func())
}) *Driver {
	mock := &Driver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
