// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Column is an autogenerated mock type for the Column type
type Column struct {
	mock.Mock
}

type Column_Expecter struct {
	mock *mock.Mock
}

func (_m *Column) EXPECT() *Column_Expecter {
	return &Column_Expecter{mock: &_m.Mock}
}

// Change provides a mock function with given fields:
func (_m *Column) Change() {
	_m.Called()
}

// Column_Change_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Change'
type Column_Change_Call struct {
	*mock.Call
}

// Change is a helper method to define mock.On call
func (_e *Column_Expecter) Change() *Column_Change_Call {
	return &Column_Change_Call{Call: _e.mock.On("Change")}
}

func (_c *Column_Change_Call) Run(run func()) *Column_Change_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Column_Change_Call) Return() *Column_Change_Call {
	_c.Call.Return()
	return _c
}

func (_c *Column_Change_Call) RunAndReturn(run func()) *Column_Change_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllowed provides a mock function with given fields:
func (_m *Column) GetAllowed() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllowed")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Column_GetAllowed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllowed'
type Column_GetAllowed_Call struct {
	*mock.Call
}

// GetAllowed is a helper method to define mock.On call
func (_e *Column_Expecter) GetAllowed() *Column_GetAllowed_Call {
	return &Column_GetAllowed_Call{Call: _e.mock.On("GetAllowed")}
}

func (_c *Column_GetAllowed_Call) Run(run func()) *Column_GetAllowed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Column_GetAllowed_Call) Return(_a0 []string) *Column_GetAllowed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Column_GetAllowed_Call) RunAndReturn(run func() []string) *Column_GetAllowed_Call {
	_c.Call.Return(run)
	return _c
}

// GetAutoIncrement provides a mock function with given fields:
func (_m *Column) GetAutoIncrement() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAutoIncrement")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Column_GetAutoIncrement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAutoIncrement'
type Column_GetAutoIncrement_Call struct {
	*mock.Call
}

// GetAutoIncrement is a helper method to define mock.On call
func (_e *Column_Expecter) GetAutoIncrement() *Column_GetAutoIncrement_Call {
	return &Column_GetAutoIncrement_Call{Call: _e.mock.On("GetAutoIncrement")}
}

func (_c *Column_GetAutoIncrement_Call) Run(run func()) *Column_GetAutoIncrement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Column_GetAutoIncrement_Call) Return(_a0 bool) *Column_GetAutoIncrement_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Column_GetAutoIncrement_Call) RunAndReturn(run func() bool) *Column_GetAutoIncrement_Call {
	_c.Call.Return(run)
	return _c
}

// GetLength provides a mock function with given fields:
func (_m *Column) GetLength() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLength")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Column_GetLength_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLength'
type Column_GetLength_Call struct {
	*mock.Call
}

// GetLength is a helper method to define mock.On call
func (_e *Column_Expecter) GetLength() *Column_GetLength_Call {
	return &Column_GetLength_Call{Call: _e.mock.On("GetLength")}
}

func (_c *Column_GetLength_Call) Run(run func()) *Column_GetLength_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Column_GetLength_Call) Return(_a0 int) *Column_GetLength_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Column_GetLength_Call) RunAndReturn(run func() int) *Column_GetLength_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with given fields:
func (_m *Column) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Column_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type Column_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *Column_Expecter) GetName() *Column_GetName_Call {
	return &Column_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *Column_GetName_Call) Run(run func()) *Column_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Column_GetName_Call) Return(_a0 string) *Column_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Column_GetName_Call) RunAndReturn(run func() string) *Column_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlaces provides a mock function with given fields:
func (_m *Column) GetPlaces() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPlaces")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Column_GetPlaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlaces'
type Column_GetPlaces_Call struct {
	*mock.Call
}

// GetPlaces is a helper method to define mock.On call
func (_e *Column_Expecter) GetPlaces() *Column_GetPlaces_Call {
	return &Column_GetPlaces_Call{Call: _e.mock.On("GetPlaces")}
}

func (_c *Column_GetPlaces_Call) Run(run func()) *Column_GetPlaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Column_GetPlaces_Call) Return(_a0 int) *Column_GetPlaces_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Column_GetPlaces_Call) RunAndReturn(run func() int) *Column_GetPlaces_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrecision provides a mock function with given fields:
func (_m *Column) GetPrecision() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPrecision")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Column_GetPrecision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrecision'
type Column_GetPrecision_Call struct {
	*mock.Call
}

// GetPrecision is a helper method to define mock.On call
func (_e *Column_Expecter) GetPrecision() *Column_GetPrecision_Call {
	return &Column_GetPrecision_Call{Call: _e.mock.On("GetPrecision")}
}

func (_c *Column_GetPrecision_Call) Run(run func()) *Column_GetPrecision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Column_GetPrecision_Call) Return(_a0 int) *Column_GetPrecision_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Column_GetPrecision_Call) RunAndReturn(run func() int) *Column_GetPrecision_Call {
	_c.Call.Return(run)
	return _c
}

// GetTotal provides a mock function with given fields:
func (_m *Column) GetTotal() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTotal")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Column_GetTotal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotal'
type Column_GetTotal_Call struct {
	*mock.Call
}

// GetTotal is a helper method to define mock.On call
func (_e *Column_Expecter) GetTotal() *Column_GetTotal_Call {
	return &Column_GetTotal_Call{Call: _e.mock.On("GetTotal")}
}

func (_c *Column_GetTotal_Call) Run(run func()) *Column_GetTotal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Column_GetTotal_Call) Return(_a0 int) *Column_GetTotal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Column_GetTotal_Call) RunAndReturn(run func() int) *Column_GetTotal_Call {
	_c.Call.Return(run)
	return _c
}

// GetType provides a mock function with given fields:
func (_m *Column) GetType() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Column_GetType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetType'
type Column_GetType_Call struct {
	*mock.Call
}

// GetType is a helper method to define mock.On call
func (_e *Column_Expecter) GetType() *Column_GetType_Call {
	return &Column_GetType_Call{Call: _e.mock.On("GetType")}
}

func (_c *Column_GetType_Call) Run(run func()) *Column_GetType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Column_GetType_Call) Return(_a0 string) *Column_GetType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Column_GetType_Call) RunAndReturn(run func() string) *Column_GetType_Call {
	_c.Call.Return(run)
	return _c
}

// NewColumn creates a new instance of Column. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewColumn(t interface {
	mock.TestingT
	Cleanup(func())
}) *Column {
	mock := &Column{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
